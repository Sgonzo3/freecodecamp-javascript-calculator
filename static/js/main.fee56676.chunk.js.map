{"version":3,"sources":["Button.js","Calculator.js","App.js","serviceWorker.js","index.js"],"names":["Button","props","state","this","value","React","Component","Calculator","evaluate","answer","first","operator","hash","output","setState","operatorsList","console","log","handleClick","target","checkDecimal","clear","includes","checkOperator","second","buttons","ids","map","button","index","className","Number","key","id","onClick","renderButtons","App","href","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.fee56676.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\n\n  class Button extends React.Component {\n    constructor(props) {\n      super(props);\n      this.state = {\n  \n      }\n    }\n    render() {\n      return(\n        <button\n          {...this.props}\n          >\n          {this.props.value}\n        </button>\n      )\n    }\n  }\n\n  export default Button;","import React from 'react';\nimport './App.css';\nimport Button from './Button.js';\n\nclass Calculator extends React.Component {\n    constructor(props) {\n      super(props);\n      this.state = {\n        output: '',\n        first: '',\n        operator: '',\n        operatorsList: [\"*\", \"/\", \"+\"],\n        hash: {\n          \"/\": (first, second) => +first / +second,\n          \"*\": (first, second) => +first * +second,\n          \"-\": (first, second) => +first - +second,\n          \"+\": (first, second) => +first + +second,\n        },\n        buttons: [\"7\", \"8\", \"9\", \"/\", \"4\", \"5\", \"6\", \"*\", \"1\", \"2\", \"3\", \"-\", \".\", \"0\", \"=\", \"+\"],\n        ids: [\"seven\", \"eight\", \"nine\", \"divide\", \"four\", \"five\", \"six\", \"multiply\", \"one\", \"two\", \"three\", \"subtract\", \"decimal\", \"zero\", \"equals\", \"add\"]\n  \n      }\n    }\n  \n    renderButtons() {\n      return this.state.buttons.map( (button, index) =>\n        {\n        return(\n          <Button\n            className={\n              (Number(button) >= 0)\n                ? \"number\"\n                : \"operator\"\n            }\n            key={button}\n            id={this.state.ids[index]}\n            onClick={this.handleClick}\n            value={button}/>\n        )\n      });\n    }\n  \n    evaluate = () => {\n      let answer = '';\n      if(this.state.first && this.state.operator){\n        if(!this.state.hash[this.state.output]){\n          answer = (this.state.operator(this.state.first, this.state.output));\n        }\n      }\n      return this.setState({\n        output: '' + answer,\n        first: '' + answer,\n        operator: '',\n        operatorsList: [\"*\", \"/\", \"+\", \"-\"],\n      }, () => console.log(this.state));\n    }\n  \n    checkDecimal(value){\n      if(this.state.output.includes(\".\")) {\n        console.log(\"Only one decimal!\");\n        return;\n      }\n      return this.setState({\n        output: this.state.output + value,\n        operatorsList: [\"*\", \"/\", \"+\"],\n  \n      }, () => console.log(this.state));\n    }\n  \n    clear(){\n      this.setState({\n           output: '',\n           first: '',\n           operator: '',\n           operatorsList: [\"*\", \"/\", \"+\"]\n      }, () => console.log(this.state));\n    }\n  \n    checkOperator(value){\n      if (this.state.operator){\n        if(this.state.output !== '-') this.evaluate();\n        return this.setState({\n          output: '',\n          operator: this.state.hash[value],\n          operatorsList: [\"*\", \"/\", \"+\"]\n        }, () => console.log(this.state));\n      } else {\n        return this.setState({\n          output: '',\n          first: this.state.output,\n          operator: this.state.hash[value],\n          operatorsList: [\"*\", \"/\", \"+\"]\n        }, () => console.log(this.state));\n      }\n    }\n  \n    handleClick = ({target}) => {\n      const {value} = target;\n      if(value === \".\") {\n        return this.checkDecimal(value);\n      } else if(value === \"0\" && this.state.output === \"\") {\n        return console.log(\"No leading multiple zeroes!!\");\n      } else if(value === \"CLEAR\") {\n        return this.clear();\n      } else if(value === \"=\") {\n        return this.evaluate();\n      } else if(this.state.operatorsList.includes(value)) {\n        return this.checkOperator(value);\n      } \n      else {\n          this.setState({\n               operatorsList: [\"*\", \"/\", \"+\", \"-\"],\n               output: this.state.output + value,\n             }, () => console.log(this.state));\n      }\n    }\n  \n    render(){\n      return(\n        <main className=\"Calculator\">\n          <section\n            className=\"display-field\"\n            >\n            <Button\n              key=\"CLEAR\"\n              value=\"CLEAR\"\n              id=\"clear\"\n              onClick={this.handleClick}\n              />\n            <span className=\"input\"></span>\n            <span\n              className=\"output\"\n              id=\"display\"\n              >{this.state.output || '0'}</span>\n          </section>\n          <aside className=\"panel\">\n            {this.renderButtons()}\n          </aside>\n        </main>\n      )\n    }\n  }\n  \n  export default Calculator;","import React from 'react';\nimport './App.css';\nimport Calculator from './Calculator.js';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>JavaScript Calculator</h1>\n      </header>\n      <Calculator/>\n      <footer>\n        <span>Made by <a href=\"https://sgonzo3.github.io/\">Santos Gonzalez</a></span>\n      </footer>\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}